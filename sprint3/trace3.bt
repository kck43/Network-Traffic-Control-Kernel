#!/usr/bin/env bpftrace

#include <linux/skbuff.h>

// Define a global map with MAC addresses as keys (6 bytes) and a 2-tuple of timestamps (64-bit) as values
//@pkt_timestamps[6] = [u64, u64]; // key: 6-byte MAC, value: 2-tuple of timestamps

tracepoint:syscalls:sys_enter_sendto
/ comm == "send_raw_eth_2" /
{
    // Get the skb address and data from the sys_enter_sendto tracepoint
    $addr = (struct sockaddr_ll *)(args->addr);
    //$data = $skb->head + $skb->mac_header;
    
    // Extract the MAC address at offset 14 (Ethernet header)
    $mac = macaddr($addr + 14);
    
    // Get the current timestamp for sys_enter_sendto
    $timestamp = nsecs;

    // Update the map with the sys_enter_sendto timestamp
    @sendto_timestamps[$mac] = $timestamp;
}

tracepoint:net:net_dev_xmit
/ comm == "send_raw_eth_2" /
{
    // Get the skb address and data from the net_dev_xmit tracepoint
    $skb = (struct sk_buff *)(args->skbaddr);
    $data = $skb->head + $skb->mac_header;
    
    // Extract the MAC address at offset 14 (Ethernet header)
    $mac = macaddr($data + 14);
    
    // Get the current timestamp for net_dev_xmit
    $timestamp = nsecs;

    // Retrieve the sys_enter_sendto timestamp from the map using the MAC address
    @xmit_timestamps[$mac] = $timestamp;
}

// End block to print all collected data at the end of the trace session
END {
    printf("Printing map data after trace session...\n");
//    foreach ($mac in @sendto_timestamps) {
  //      $timestamp_sendto = @sendto_timestamps[$mac];
    //    $timestamp_xmit = @xmit_timestamps[$mac];
//	printf("MAC: %s Sendto Timestamp: %ld NetDevXmit Timestamp: %ld\n", printmac($mac), $timestamp_sendto, $timestamp_xmit);
  //  }
}
